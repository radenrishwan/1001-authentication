// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notes.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (
    title,
    content,
    user_id
) VALUES (
    $1, $2, $3
) RETURNING id, title, content, user_id, created_at, updated_at
`

type CreateNoteParams struct {
	Title   string
	Content string
	UserID  string
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote, arg.Title, arg.Content, arg.UserID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes
WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteNote, id)
	return err
}

const getNote = `-- name: GetNote :one
SELECT id, title, content, user_id, created_at, updated_at FROM notes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetNote(ctx context.Context, id pgtype.UUID) (Note, error) {
	row := q.db.QueryRow(ctx, getNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listNotesByUser = `-- name: ListNotesByUser :many
SELECT id, title, content, user_id, created_at, updated_at FROM notes
WHERE user_id = $1
ORDER BY created_at DESC
OFFSET $2 LIMIT $3
`

type ListNotesByUserParams struct {
	UserID string
	Offset int32
	Limit  int32
}

func (q *Queries) ListNotesByUser(ctx context.Context, arg ListNotesByUserParams) ([]Note, error) {
	rows, err := q.db.Query(ctx, listNotesByUser, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryNoteByUser = `-- name: QueryNoteByUser :many
SELECT id, title, content, user_id, created_at, updated_at FROM notes
WHERE user_id = $1
AND (title ILIKE $2 OR content ILIKE $2)
ORDER BY created_at DESC
OFFSET $3 LIMIT $4
`

type QueryNoteByUserParams struct {
	UserID string
	Title  string
	Offset int32
	Limit  int32
}

func (q *Queries) QueryNoteByUser(ctx context.Context, arg QueryNoteByUserParams) ([]Note, error) {
	rows, err := q.db.Query(ctx, queryNoteByUser,
		arg.UserID,
		arg.Title,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes
SET title = $2,
    content = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, content, user_id, created_at, updated_at
`

type UpdateNoteParams struct {
	ID      pgtype.UUID
	Title   string
	Content string
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, updateNote, arg.ID, arg.Title, arg.Content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
